package it.laskaridis.blockyard.digests;

import it.laskaridis.blockyard.annotations.Immutable;
import it.laskaridis.blockyard.annotations.ThreadSafe;
import org.apache.commons.codec.binary.Hex;

import java.util.Arrays;
import java.util.Objects;

import static it.laskaridis.blockyard.utils.Assert.notNull;

@Immutable @ThreadSafe
public class Digest {

    /**
     * Specifies SHA-256d digest (i.e. H(x) = SHA-256(SHA-256(x)))
     */
    public static final String HASH256 = "HASH256";

    /**
     * Specifies double digest using SHA-256 and RIPEMD-160 (i.e. H(x) = RIPEMD-160(SHA-256(x))
     */
    public static final String HASH160 = "HASH160";

    private final byte[] value;

    private final String type;

    /**
     * Creates a digest instance with the specified image, generated by the
     * specified algorithm.
     *
     * @param value the digest code (image) value
     * @param algorithm the digest algorithm used to generate the image
     */
    public Digest(byte[] value, String algorithm) {
        notNull(value, "digest value can't be null");
        notNull(algorithm, "digest algorithm can't be null");
        this.value = value;
        this.type = algorithm;
    }

    /**
     * Retrieve the digest code value (image) as a byte array.
     *
     * @return a copy of the original digest byte array value
     */
    public byte[] getValueAsByteArray() {
        return Arrays.copyOf(this.value, this.value.length);
    }

    /**
     * Retrieve the digest code value (image) as a string.
     *
     * @return the original digest byte array value converted into a string
     */
    public String getValueAsString() {
        return Hex.encodeHexString(this.value);
    }

    /**
     * Get the digest algorithm type.
     *
     * @return the digest algorithm type
     */
    public String getType() {
        return type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Digest digest = (Digest) o;
        return Arrays.equals(value, digest.value) && type.equals(digest.type);
    }

    @Override
    public int hashCode() {
        int result = Objects.hash(type);
        result = 31 * result + Arrays.hashCode(value);
        return result;
    }
}
